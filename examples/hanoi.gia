use "search.gia";

datatype HanoiState extends State = {peg1 : int*, peg2 : int*, peg3 : int*};

HanoiState(p1 : int*, p2 : int*, p3 : int*) : HanoiState {
  peg1 = p1;
  peg2 = p2;
  peg3 = p3;
  legalMove(p1 : int*, p2 : int*) {
    return !p1.null & (p2.null | p1.hd < p2.hd);
  };
  actions =
    (if legalMove(peg1, peg2)
     then [HanoiState(peg1.tl, peg1.hd :: peg2, peg3)]
     else []) +
    (if legalMove(peg1, peg3)
     then [HanoiState(peg1.tl, peg2, peg1.hd :: peg3)]
     else []) +
    (if legalMove(peg2, peg1)
     then [HanoiState(peg2.hd :: peg1, peg2.tl, peg3)]
     else []) +
    (if legalMove(peg2, peg3)
     then [HanoiState(peg1, peg2.tl, peg2.hd :: peg3)]
     else []) +
    (if legalMove(peg3, peg1)
     then [HanoiState(peg3.hd :: peg1, peg2, peg3.tl)]
     else []) +
    (if legalMove(peg3, peg2)
     then [HanoiState(peg1, peg3.hd :: peg2, peg3.tl)]
     else []);
  done = p1.null & p2.null;

  pp =
    implode("", map(toStr, peg1)) + " " +
    implode("", map(toStr, peg2)) + " " +
    implode("", map(toStr, peg3));
    
};

datatype Hanoi extends Problem = {};

Hanoi(size : int) : Hanoi {
  initial = HanoiState(range(1, size + 1), [], []);
  pp = initial.pp;
};