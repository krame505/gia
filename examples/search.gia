# Collection of search algorithms

datatype State   = {actions : State*, done : bool, pp : str};
datatype Node    = {state : State, actions : State*, depth : int, path : State*, parent : Node?};
datatype Problem = {initial : State, pp : str};

Node(s : State, p : Node?) : Node {
  state = s;
  actions = state.actions;
  parent = p;
  path =
    if parent
    then parent.value.path + [state]
    else [state];
  depth =
    if parent
    then parent.value.depth + 1
    else 1;
};

type SearchResult = {path : State*, depth : int, result : State};

depth_first_search(p : Problem) : SearchResult? {
  search(nodes, visited)
    if nodes
    then None()
    else if nodes.hd.state.done
    then Some(nodes.hd)
    else search(map(fn(state)(Node(state, Some(nodes.hd))),
                    filter(fn(s)(!inSet(s, visited)),
                           nodes.hd.actions)) +
                    nodes.tl,
                visited | set {nodes.hd.state});
  res = search([Node(p.initial, None())], set {});
  return
    if res
    then Some({
        path = res.value.path;
        depth = res.value.depth;
        result = res.value.state;
      })
    else None();
};

breadth_first_search(p : Problem) : SearchResult? {
  search(nodes, visited)
    if nodes.null
    then None()
    else if nodes.hd.state.done
    then Some(nodes.hd)
    else search(nodes.tl +
                map(fn(state)(Node(state, Some(nodes.hd))),
                    filter(fn(s)(!inSet(s, visited)),
                           nodes.hd.actions)),
                visited | set {nodes.hd.state});
  res = search([Node(p.initial, None())], set {});
  return
    if res
    then Some({
        path = res.value.path;
        depth = res.value.depth;
        result = res.value.state;
      })
    else None();
};
